# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DesireDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, cfa_image=None, count=None, price=None, seller=None):  # noqa: E501
        """DesireDTO - a model defined in OpenAPI

        :param id: The id of this DesireDTO.  # noqa: E501
        :type id: int
        :param cfa_image: The cfa_image of this DesireDTO.  # noqa: E501
        :type cfa_image: CfaImage
        :param count: The count of this DesireDTO.  # noqa: E501
        :type count: int
        :param price: The price of this DesireDTO.  # noqa: E501
        :type price: float
        :param seller: The seller of this DesireDTO.  # noqa: E501
        :type seller: PublicUser
        """
        self.openapi_types = {
            'id': int,
            'cfa_image': 'CfaImage',
            'count': int,
            'price': float,
            'seller': 'PublicUser'
        }

        self.attribute_map = {
            'id': 'id',
            'cfa_image': 'cfa_image',
            'count': 'count',
            'price': 'price',
            'seller': 'seller'
        }

        self._id = id
        self._cfa_image = cfa_image
        self._count = count
        self._price = price
        self._seller = seller

    @classmethod
    def from_dict(cls, dikt) -> 'DesireDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Desire_dto of this DesireDTO.  # noqa: E501
        :rtype: DesireDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DesireDTO.


        :return: The id of this DesireDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DesireDTO.


        :param id: The id of this DesireDTO.
        :type id: int
        """

        self._id = id

    @property
    def cfa_image(self):
        """Gets the cfa_image of this DesireDTO.


        :return: The cfa_image of this DesireDTO.
        :rtype: CfaImage
        """
        return self._cfa_image

    @cfa_image.setter
    def cfa_image(self, cfa_image):
        """Sets the cfa_image of this DesireDTO.


        :param cfa_image: The cfa_image of this DesireDTO.
        :type cfa_image: CfaImage
        """

        self._cfa_image = cfa_image

    @property
    def count(self):
        """Gets the count of this DesireDTO.


        :return: The count of this DesireDTO.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DesireDTO.


        :param count: The count of this DesireDTO.
        :type count: int
        """

        self._count = count

    @property
    def price(self):
        """Gets the price of this DesireDTO.


        :return: The price of this DesireDTO.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DesireDTO.


        :param price: The price of this DesireDTO.
        :type price: int
        """

        self._price = price

    @property
    def seller(self):
        """Gets the seller of this DesireDTO.


        :return: The seller of this DesireDTO.
        :rtype: int
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this DesireDTO.


        :param seller: The seller of this DesireDTO.
        :type seller: int
        """

        self._seller = seller
