# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from openapi_server import util
from openapi_server.models.base_model_ import Model


class Cfa(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token=None, cfa_image_id=None, user_id=None):  # noqa: E501
        """Cfa - a model defined in OpenAPI

        :param token: The token of this Cfa.  # noqa: E501
        :type token: str
        :param cfa_image_id: The cfa_image_id of this Cfa.  # noqa: E501
        :type cfa_image_id: int
        :param user_id: The user_id of this Cfa.  # noqa: E501
        :type user_id: int
        """
        self.openapi_types = {
            'token': str,
            'cfa_image_id': int,
            'user_id': int
        }

        self.attribute_map = {
            'token': 'token',
            'cfa_image_id': 'cfa_image_id',
            'user_id': 'user_id'
        }

        self._token = token
        self._cfa_image_id = cfa_image_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt) -> 'Cfa':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Cfa of this Cfa.  # noqa: E501
        :rtype: Cfa
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self):
        """Gets the token of this Cfa.


        :return: The token of this Cfa.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Cfa.


        :param token: The token of this Cfa.
        :type token: str
        """

        self._token = token

    @property
    def cfa_image_id(self):
        """Gets the cfa_image_id of this Cfa.


        :return: The cfa_image_id of this Cfa.
        :rtype: int
        """
        return self._cfa_image_id

    @cfa_image_id.setter
    def cfa_image_id(self, cfa_image_id):
        """Sets the cfa_image_id of this Cfa.


        :param cfa_image_id: The cfa_image_id of this Cfa.
        :type cfa_image_id: int
        """

        self._cfa_image_id = cfa_image_id

    @property
    def user_id(self):
        """Gets the user_id of this Cfa.


        :return: The user_id of this Cfa.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Cfa.


        :param user_id: The user_id of this Cfa.
        :type user_id: int
        """

        self._user_id = user_id
