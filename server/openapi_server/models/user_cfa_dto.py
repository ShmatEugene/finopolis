# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models import CfaImage
from openapi_server import util


class UserCfaDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cfa_image=None, count=None, tokens=None):  # noqa: E501
        """UserCfaDTO - a model defined in OpenAPI

        :param cfa_image: The cfa_image of this UserCfaDTO.  # noqa: E501
        :type cfa_image: CfaImage
        :param count: The count of this UserCfaDTO.  # noqa: E501
        :type count: int
        :param tokens: The list of tokens of this UserCfaDTO.  # noqa: E501
        :type tokens: list
        """
        self.openapi_types = {
            'cfa_image': CfaImage,
            'count': int,
            'tokens': list
        }

        self.attribute_map = {
            'cfa_image': 'cfa_image',
            'count': 'count',
            'tokens': 'tokens'
        }

        self._cfa_image = cfa_image
        self._count = count
        self._tokens = tokens

    @classmethod
    def from_dict(cls, dikt) -> 'UserCfaDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user_cfa_dto of this UserCfaDTO.  # noqa: E501
        :rtype: UserCfaDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cfa_image(self):
        """Gets the cfa_image of this UserCfaDTO.


        :return: The cfa_image of this UserCfaDTO.
        :rtype: int
        """
        return self._cfa_image

    @cfa_image.setter
    def cfa_image(self, cfa_image):
        """Sets the cfa_image of this UserCfaDTO.


        :param cfa_image: The cfa_image of this UserCfaDTO.
        :type cfa_image: int
        """

        self._cfa_image = cfa_image

    @property
    def count(self):
        """Gets the count of this UserCfaDTO.


        :return: The count of this UserCfaDTO.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this UserCfaDTO.


        :param count: The count of this UserCfaDTO.
        :type count: int
        """

        self._count = count

    @property
    def tokens(self):
        """Gets the tokens of this UserCfaDTO.


        :return: The tokens of this UserCfaDTO.
        :rtype: list
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this UserCfaDTO.


        :param tokens: The tokens of this UserCfaDTO.
        :type tokens: list
        """

        self._tokens = tokens
